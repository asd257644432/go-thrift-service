// Code generated by Kitex v0.0.8. DO NOT EDIT.

package helloservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/go/go-thrift-service/kitex_gen/github/go/go_thrift_service"
)

func serviceInfo() *kitex.ServiceInfo {
	return helloServiceServiceInfo
}

var helloServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "HelloService"
	handlerType := (*go_thrift_service.HelloService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Hello": kitex.NewMethodInfo(helloHandler, newHelloServiceHelloArgs, newHelloServiceHelloResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "go_thrift_service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func helloHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*go_thrift_service.HelloServiceHelloArgs)
	realResult := result.(*go_thrift_service.HelloServiceHelloResult)
	success, err := handler.(go_thrift_service.HelloService).Hello(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHelloServiceHelloArgs() interface{} {
	return go_thrift_service.NewHelloServiceHelloArgs()
}

func newHelloServiceHelloResult() interface{} {
	return go_thrift_service.NewHelloServiceHelloResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Hello(ctx context.Context, request *go_thrift_service.ReqOfHello) (r *go_thrift_service.RespOfHello, err error) {
	var _args go_thrift_service.HelloServiceHelloArgs
	_args.Request = request
	var _result go_thrift_service.HelloServiceHelloResult
	if err = p.c.Call(ctx, "Hello", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
